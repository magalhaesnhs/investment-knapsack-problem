# -*- coding: utf-8 -*-
"""Otimização de Sistemas - APS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J4v53tHNnsBRnjDkidCw4ranpcqGCcz3
"""

!pip install yfinance

import yfinance as yf
import numpy as np
import pandas as pd

comp = ['AMZN', 'META', 'GOOG', 'AMD', 'HPE', 'ORCL', 'INTC', '2399.TW', 'SONY', '2353.TW', 'CSCO', 'TORO', 'XP', 'INTR', 'NU', 'BPAC11.SA', 'YOU', 'SBS', 'PBR', 'BBSE3.SA', 'TIMS3.SA', 'ABEV3.SA', 'AZUL4.SA', 'STBP3.SA',
        'BRKM5.SA', 'CSNA3.SA', 'PRIO3.SA', 'BPAC11.SA', 'MILS3.SA', 'PRNR3.SA', 'AMX', 'MSFT', 'TCEHY', 'AVGO', 'SAP', 'ACN', 'CRM', 'ISRG', 'CAP.PA', 'UBER', 'SHOP', 'ZM', 'SNPS', 'TEAM']

#calcula os melhores investimentos com menores riscos
def best_invest(comp, risc):
  data = invest_return(risc_calc(comp, risc))
  #organizar os investimentos
  risc_list = []
  for keys in data:
    risc_list.append(data.get(keys)[0])
  risc_list.sort()
  display_results(data, risc_list)

def risc_calc(tickers, risc):
  info = {}
  #coletar dados de cada ticker
  for ticker in tickers:
    avg = 0
    variation = 0
    data = yf.Ticker(ticker)
    data_h = data.history(period="1mo")
    #calcular a média
    for close in data_h['Close']:
      avg += close
    avg = avg/len(data_h['Close'])
    #calcular a varancia
    for close in data_h['Close']:
      var1 = close - avg
      variation += pow(var1, 2)
    variation = variation / len(data_h['Close'])
    #definir o desvio padrão
    dp = np.sqrt(variation)
    #teste de risco
    if dp <= risc:
      info[ticker] = dp
  return info

#calcula os possives retornos
def invest_return(data):
  for keys in data:
    ticker_data = yf.Ticker(keys).history(period='1mo')
    #valor de fechamento inicial:
    initial_close = ticker_data['Close'].iloc[0]
    #valor de fechamento final
    end_close = ticker_data['Close'].iloc[-1]
    #retorno estipulado em porcentagem
    percent_return = ((end_close - initial_close) / initial_close) * 100
    list = [data.get(keys), percent_return]
    data[keys] = list
  return data

#printa as informações
def display_results(data, list_r):
  #printar os dados em ordem
  for i in list_r:
    for keys in data:
      if i == data.get(keys)[0]:
        __builtins__.print(keys + ":")
        __builtins__.print("\tRisco: " + "{:.2f}".format(data.get(keys)[0]))
        __builtins__.print("\tPossivel Retorno: " + "{:.2f}".format(data.get(keys)[1]) + "%\n")
        break


risc = float(input("Informe o risco: \n"))
best_invest(comp, risc)